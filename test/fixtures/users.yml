#この時点では、テストDB用のサンプルデータが含まれているfixtures内で
#一意性の制限が保たれていないため、テストは red になります。
#つまり、リスト 6.1でユーザー用のfixtureが自動的に生成されていましたが、
#ここのメールアドレスが一意になっていないことが原因です (リスト 6.30)
#(実はこのデータはいずれも有効ではありませんが、
#fixture内のサンプルデータはバリデーションを通っていなかったので
#今まで問題にはなっていなかっただけでした)。

#one:
#  name: MyString
#  email: MyString

#two:
#  name: MyString
#  email: MyStrin

#テスト時に登録済みユーザーとしてログインしておく必要があります。
#当然ながら、データベースにそのためのユーザーが登録されていなければなりません。
#Railsでは、このようなテスト用データをfixture (フィクスチャ) で作成できます。
#このfixtureを使って、テストに必要なデータをtestデータベースに読み込んでおくことができます。
#has_secure_passwordで必要となるpassword_digest属性はこれで準備できましたが、
#ハッシュ化されていない生のパスワードも参照できると便利です。
#しかし残念なことに、fixtureではこのようなことはできません。
#さらに、リスト 8.22にpassword属性を追加すると、
#そのようなカラムはデータベースに存在しないというエラーが発生します。
#実際、データベースにはそんなカラムはありません。
#この状況を切り抜けるため、
#テスト用のfixtureでは全員同じパスワード「password」を使うことにします (これはfixtureでよく使われる手法です)。

michael:
  name: Michael Example
  email: michael@example.com
  password_digest: <%= User.digest('password') %>
  admin: true

archer:
  name: Sterling Archer
  email: duchess@example.gov
  password_digest: <%= User.digest('password') %>

lana:
  name: Lana Kane
  email: hands@example.gov
  password_digest: <%= User.digest('password') %>

malory:
  name: Malory Archer
  email: boss@example.gov
  password_digest: <%= User.digest('password') %>

<% 30.times do |n| %>
user_<%= n %>:
  name: <%= "User#{n}" %>
  email: <%= "user-#{n}@example.com" %>
  password_digest: <%= User.digest('password') %>
<% end %>


#有効なユーザー用のfixtureを作成できたので、
#テストではuser = users(:michael)で参照できる
#上のusersはfixtureのファイル名users.ymlを表し、
#:michaelというシンボルはリスト 8.22のユーザーを参照するためのキーを表します。
